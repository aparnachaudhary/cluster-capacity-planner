package io.github.aparnachaudhary.capacityplanner.domain;
dialect  "java"

import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

import io.github.aparnachaudhary.capacityplanner.domain.ClusterNode;
import io.github.aparnachaudhary.capacityplanner.domain.ClusterProcess;

global HardMediumSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################


rule "CPU capacity"
    when
        $clusterNode : ClusterNode($cpuCapacity : cpuCapacity)
        $totalUsed : Integer($totalUsed > $cpuCapacity) from accumulate(
            ClusterProcess(clusterNode == $clusterNode, $cpuRequired : cpuRequired),
            sum($cpuRequired)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $cpuCapacity - $totalUsed);
end

rule "Memory capacity"
    when
        $clusterNode : ClusterNode($memoryCapacity : memoryCapacity)
        $totalUsed : Integer($totalUsed > $memoryCapacity) from accumulate(
            ClusterProcess(clusterNode == $clusterNode, $memoryRequired : memoryRequired),
            sum($memoryRequired)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $memoryCapacity - $totalUsed);
end

rule "Network capacity"
    when
        $clusterNode : ClusterNode($networkCapacity : networkCapacity)
        $totalUsed : Integer($totalUsed > $networkCapacity) from accumulate(
            ClusterProcess(clusterNode == $clusterNode, $networkRequired : networkRequired),
            sum($networkRequired)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $networkCapacity - $totalUsed);
end

// ############################################################################
// Medium constraints
// ############################################################################

rule "Not Assigned"
    when
        ClusterProcess($weightIndex : getDifficultyIndex(), clusterNode == null)
    then
        scoreHolder.addMediumConstraintMatch(kcontext, -$weightIndex);
end


// ############################################################################
// Soft constraints
// ############################################################################

rule "Computer Cost"
    when
        $clusterNode : ClusterNode($cost : cost)
        exists ClusterProcess(clusterNode == $clusterNode)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $cost);
end